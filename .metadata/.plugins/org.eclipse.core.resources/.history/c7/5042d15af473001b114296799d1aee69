package ma.youcode.doctor.controllers;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.persistence.Query;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.mindrot.jbcrypt.BCrypt;

import ma.youcode.doctor.config.HybernateConfig;
import ma.youcode.doctor.entity.User;

/**
 * Servlet implementation class Login
 */
@WebServlet("/login")
public class Login extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private HybernateConfig hybernateConfig = null;
	List<User> user = null;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Login() {
        super();
    }


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// Instantiate HybernateConfig
		hybernateConfig = new HybernateConfig();
		
		// Get session factory
		SessionFactory factory = hybernateConfig.getSessionFactory();
		
		// Create session
		Session session = factory.getCurrentSession();
		
		// Get data from user
		String email = request.getParameter("email");
		String password = request.getParameter("password");
		String hashPwd = BCrypt.hashpw(password, BCrypt.gensalt());
		
		try {
			// Start transaction
			session.beginTransaction();
			
			// Query users and get user
			Query hql = session.createQuery("FROM User");
			user = hql.getResultList();
			
			// Create http session
			HttpSession httpSession = request.getSession();
			
			boolean isUserExists = this.isAuth(email, password, hashPwd);
			
			if (isUserExists) {
		        // set reacted message
				httpSession.setAttribute("isLoggedIn", true);
				
				// Create user session
				this.createUserSession(userInfo, httpSession);
				
				
			}else {
				
			}

			
			// Commit transaction
			session.getTransaction().commit();

			
		} finally {
			// Close factory
			factory.close();
		}
	}
	
	// Create user session
	public User createUserSession(User user, HttpSession session) {
		session.setAttribute("user", user);
		return user;
	}
	
	// Is User Auth
	private boolean isAuth(String email, String password, String hashPwd) {
		boolean isLoggedIn = false;
		
		// Loop through users
		for (User userInfo : user) {
			// Check info
			if (userInfo.getEmail().equals(email) && BCrypt.checkpw(password, hashPwd)) {
		        
		        // set user exists
				isLoggedIn = true;
		        
			}else {
		        // set reacted message
//				httpSession.setAttribute("isLoggedIn", false);
				
		        
		        // set user does not exists
				isLoggedIn = false;
			}
		}
		
		// return isLoggedIn
		return isLoggedIn;
	}

}
